{
  "version": 3,
  "sources": ["../../../src/Utils/music.ts"],
  "sourcesContent": ["import Discord, { ButtonStyle, Colors } from \"discord.js\";\r\nimport { Client } from \"genius-lyrics\";\r\n\r\nimport { Manager } from \"erela.js\";\r\nimport Spotify from \"erela.js-spotify\";\r\n\r\nimport logger from \"./logger\";\nimport config from \"../config.json\";\r\n\r\nexport default (bot: any) => {\r\n    bot.lyricsClient = new Client(process.env.GENIUS);\r\n    bot.music = new Manager({\r\n        nodes: [{\n          host: \"lavalink.joshsevero.dev\",\n          port: 80,\n          password: \"oxygen\",\n          secure: false\n        }, {\n          host: \"purr.aikomechawaii.live\",\n          port: 10415,\n          password: \"AnythingAsPassword\",\n          secure: false\n        }],\r\n        autoPlay: true,\r\n        plugins: [\r\n            new Spotify({\r\n                clientID: process.env.SPOTIFYID,\r\n                clientSecret: process.env.SPOTIFYSECRET\r\n            })\r\n        ],\r\n        send(id, payload) {\r\n            const guild = bot.guilds.cache.get(id);\r\n            guild && guild.shard.send(payload);\r\n        }\r\n    })\r\n\n    bot.on(\"raw\", (event: any) => bot.music.updateVoiceState(event));\r\n    bot.music\r\n        .on(\"nodeConnect\", (node: any) => logger(\"Music System\", `Node ${node.options.identifier} connected`, \"green\"))\r\n        .on(\"nodeError\", (node: any, error: any) => logger(\"Music System\", `Node ${node.options.identifier} had an error: ${error.message}`, \"red\"))\r\n        .on(\"trackStuck\", async (player: any, track: any) => {\r\n            const guild = bot.guilds.cache.get(player.guild);\r\n            const channel = guild.channels.cache.get(player.textChannel) || await guild.channels.fetch(player.textChannel).catch((): any => { });\r\n\r\n            channel && await channel.send({\r\n                embeds: [{\r\n                    description: `${config.emojis.alert} | **Error Occured**\\nAn error occurred while playing the song.`,\r\n                    color: Colors.Red,\r\n                    timestamp: new Date()\r\n                }]\r\n            });\r\n        }).on(\"queueEnd\", async (player: any) => {\r\n            const guild = bot.guilds.cache.get(player.guild);\r\n            const channel = guild.channels.cache.get(player.textChannel) || await guild.channels.fetch(player.textChannel);\r\n\r\n            await channel.send({\r\n                embeds: [{\r\n                    description: `${config.emojis.alert} | **Queue Ended**\\nAdd more songs to keep playing more music.`,\r\n                    color: Colors.Red,\r\n                    timestamp: new Date()\r\n                }]\r\n            });\r\n            player.destroy();\r\n        }).on(\"playerMove\", async (player: any, oldChannel: any, newChannel: any) => {\r\n            if (!newChannel) return await player.destroy();\r\n            player.setVoiceChannel(newChannel);\r\n        })\r\n\r\n    bot.music.formatDuration = (duration: number) => {\r\n        let seconds: any = Math.round((duration / 1000) % 60);\r\n        let minutes: any = Math.round((duration / (1000 * 60)) % 60);\r\n        let hours: any = Math.round(duration / (1000 * 60 * 60) % 24);\r\n\r\n        hours = (hours < 10) ? `0${hours}` : hours;\r\n        minutes = (minutes < 10) ? `0${minutes}` : minutes;\r\n        seconds = (seconds < 10) ? `0${seconds}` : seconds;\r\n\r\n        return duration < (3600 * 1000) ? `${minutes}:${seconds}` : `${hours}:${minutes}:${seconds}`;\r\n    };\r\n\r\n    bot.music.handleMusic = async (playerData: any, track: any, mEmbed: Discord.EmbedBuilder, options: any) => {\r\n        const TogglePlayingButton = new Discord.ButtonBuilder().setEmoji(config.emojis.pause).setCustomId(\"TP\")\r\n            .setStyle(ButtonStyle.Danger);\r\n        const LoopButton = new Discord.ButtonBuilder().setEmoji(config.emojis.loop).setCustomId(\"loop\")\r\n            .setStyle(ButtonStyle.Secondary);\r\n        const LyricsButton = new Discord.ButtonBuilder().setEmoji(config.emojis.queue).setCustomId(\"lyrics\")\r\n            .setStyle(ButtonStyle.Secondary);\r\n        const StopButton = new Discord.ButtonBuilder().setEmoji(config.emojis.music_stop).setCustomId(\"stop\")\r\n            .setStyle(ButtonStyle.Danger);\r\n\r\n        const buttons = [];\r\n        if (options?.includePause === true) buttons.push(TogglePlayingButton);\r\n        if (options?.includeStop === true) buttons.push(StopButton);\r\n        if (options?.includeLoop === true) buttons.push(LoopButton);\r\n\r\n        let lyrics: any;\r\n        try { lyrics = await (await bot.lyricsClient.songs.search(track.title))[0].lyrics(); } catch (e) { lyrics = null; }\r\n        if (lyrics && options?.includeLyrics === true) buttons.push(LyricsButton);\r\n\r\n        const guild = bot.guilds.cache.get(playerData.guild);\r\n        const channel = guild.channels.cache.get(playerData.textChannel) || await guild.channels.fetch(playerData.textChannel);\r\n        const MusicMessage = await channel.send({\r\n            embeds: [mEmbed],\r\n            components: buttons.length > 0 ? [{\r\n                type: 1,\r\n                components: buttons\r\n            }] : [],\r\n            fetchReply: true\r\n        }).catch((): any => { });\r\n\r\n        if (!MusicMessage) return;\r\n\r\n        let collector: any;\r\n        if (options?.createCollector === true) {\r\n            collector = MusicMessage.createMessageComponentCollector({ time: 1800 * 1000 });\r\n            collector.on(\"collect\", async (interaction: any) => {\r\n                await interaction.deferReply({ ephemeral: true });\r\n\r\n                const embed: any = {\r\n                    author: {\r\n                        name: interaction.user.tag,\r\n                        icon_url: interaction.user.displayAvatarURL()\r\n                    },\r\n                    color: Colors.Blue,\r\n                    timestamp: new Date()\r\n                }\r\n\r\n                if (interaction.customId === \"loop\") {\r\n                    const playerData = bot.music.players.get(interaction?.guild?.id);\r\n                    if (!playerData) {\r\n                        await interaction.editT(\"There is no music playing.\");\r\n                        collector.stop();\r\n                    }\r\n\r\n                    const loopModes = [0, 1, 2];\r\n                    const nextLoopMode = loopModes[track.queue.repeatMode + 1] || 0;\r\n                    const loopMode = nextLoopMode === 0 ? `${config.emojis.error} Disabled` : `${config.emojis.success} ${nextLoopMode === 1 ? \"\\`Server Queue\\`\" : \"\\`Current Song\\`\"}`;\r\n\r\n                    track.queue.setRepeatMode(nextLoopMode).catch((): any => { });\r\n\r\n                    embed.title = `${config.emojis.music} | Looping ${loopMode}`;\r\n                    embed.description = `Looping is now ${loopMode}.`;\r\n                } else if (interaction.customId === \"TP\") {\r\n                    const playerData = bot.music.players.get(interaction?.guild?.id);\r\n                    if (!playerData) {\r\n                        await interaction.editT(\"There is no music playing.\");\r\n                        collector.stop();\r\n                    }\r\n\r\n                    if (playerData?.paused === true) {\r\n                        playerData?.pause(false);\r\n\r\n                        embed.title = `${config.emojis.music} | Music Resumed!`;\r\n                        embed.description = `Resumed ${playerData?.queue?.current?.title} by ${playerData?.queue?.current?.author}.`;\r\n                        embed.color = Colors.Green;\r\n\r\n                        TogglePlayingButton.setEmoji(config.emojis.pause).setStyle(ButtonStyle.Danger);\r\n                    } else {\r\n                        playerData?.pause(true);\r\n\r\n                        embed.title = `${config.emojis.music} | Music Paused!`;\r\n                        embed.description = `Paused ${playerData?.queue?.current?.title} by ${playerData?.queue?.current?.author}.`;\r\n                        embed.color = Colors.Red;\r\n\r\n                        TogglePlayingButton.setEmoji(config.emojis.arrows.right).setStyle(ButtonStyle.Success);\r\n                    }\r\n\r\n                    MusicMessage.editT({\r\n                        embeds: [mEmbed],\r\n                        components: [{\r\n                            type: 1,\r\n                            components: [TogglePlayingButton, StopButton, LoopButton]\r\n                        }]\r\n                    });\r\n                } else if (interaction.customId === \"stop\") {\r\n                    const playerData = bot.music.players.get(interaction?.guild?.id);\r\n                    if (!playerData) {\r\n                        await interaction.editT(\"There is no music playing.\");\r\n                        collector.stop();\r\n                    }\r\n\r\n                    playerData?.stop();\r\n\r\n                    embed.title = `${config.emojis.error} | Music Stopped!`;\r\n                    embed.description = `Stopped playing ${playerData?.queue?.current?.title} by ${playerData?.queue?.current?.author}.`;\r\n                    embed.color = Colors.Red;\r\n                } else if (interaction.customId === \"lyrics\") {\r\n                    embed.title = `${config.emojis.queue} | Song Lyrics`;\r\n                    embed.description = lyrics.length >= 4000 ? `${lyrics.slice(0, 2000)}...\\nView more lyrics by running /music lyrics.` : lyrics\r\n                    embed.color = Colors.Blue;\r\n                }\r\n\r\n                interaction.reply({ embeds: [embed], ephemeral: true });\r\n            });\r\n\r\n            collector.on(\"end\", async (collected: any) => {\r\n                if (MusicMessage) {\r\n                    try {\r\n                        MusicMessage?.edit({\r\n                            embeds: [mEmbed],\r\n                            components: []\r\n                        });\r\n                    } catch (e) { }\r\n                }\r\n            });\r\n        }\r\n\r\n        return { msg: MusicMessage, collector };\r\n    };\r\n};\r\n"],
  "mappings": ";;;;;;;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA,qBAA6C;AAC7C,2BAAuB;AAEvB,mBAAwB;AACxB,oBAAoB;AAEpB,oBAAmB;AACnB,oBAAmB;AAEnB,IAAO,gBAAQ,CAAC,QAAa;AACzB,MAAI,eAAe,IAAI,4BAAO,QAAQ,IAAI;AAC1C,MAAI,QAAQ,IAAI,qBAAQ;AAAA,IACpB,OAAO,CAAC;AAAA,MACN,MAAM;AAAA,MACN,MAAM;AAAA,MACN,UAAU;AAAA,MACV,QAAQ;AAAA,OACP;AAAA,MACD,MAAM;AAAA,MACN,MAAM;AAAA,MACN,UAAU;AAAA,MACV,QAAQ;AAAA;AAAA,IAEV,UAAU;AAAA,IACV,SAAS;AAAA,MACL,IAAI,sBAAQ;AAAA,QACR,UAAU,QAAQ,IAAI;AAAA,QACtB,cAAc,QAAQ,IAAI;AAAA;AAAA;AAAA,IAGlC,KAAK,IAAI,SAAS;AACd,YAAM,QAAQ,IAAI,OAAO,MAAM,IAAI;AACnC,eAAS,MAAM,MAAM,KAAK;AAAA;AAAA;AAIlC,MAAI,GAAG,OAAO,CAAC,UAAe,IAAI,MAAM,iBAAiB;AACzD,MAAI,MACC,GAAG,eAAe,CAAC,SAAc,2BAAO,gBAAgB,QAAQ,KAAK,QAAQ,wBAAwB,UACrG,GAAG,aAAa,CAAC,MAAW,UAAe,2BAAO,gBAAgB,QAAQ,KAAK,QAAQ,4BAA4B,MAAM,WAAW,QACpI,GAAG,cAAc,OAAO,QAAa,UAAe;AACjD,UAAM,QAAQ,IAAI,OAAO,MAAM,IAAI,OAAO;AAC1C,UAAM,UAAU,MAAM,SAAS,MAAM,IAAI,OAAO,gBAAgB,MAAM,MAAM,SAAS,MAAM,OAAO,aAAa,MAAM,MAAW;AAAA;AAEhI,eAAW,MAAM,QAAQ,KAAK;AAAA,MAC1B,QAAQ,CAAC;AAAA,QACL,aAAa,GAAG,sBAAO,OAAO;AAAA;AAAA,QAC9B,OAAO,sBAAO;AAAA,QACd,WAAW,IAAI;AAAA;AAAA;AAAA,KAGxB,GAAG,YAAY,OAAO,WAAgB;AACrC,UAAM,QAAQ,IAAI,OAAO,MAAM,IAAI,OAAO;AAC1C,UAAM,UAAU,MAAM,SAAS,MAAM,IAAI,OAAO,gBAAgB,MAAM,MAAM,SAAS,MAAM,OAAO;AAElG,UAAM,QAAQ,KAAK;AAAA,MACf,QAAQ,CAAC;AAAA,QACL,aAAa,GAAG,sBAAO,OAAO;AAAA;AAAA,QAC9B,OAAO,sBAAO;AAAA,QACd,WAAW,IAAI;AAAA;AAAA;AAGvB,WAAO;AAAA,KACR,GAAG,cAAc,OAAO,QAAa,YAAiB,eAAoB;AACzE,QAAI,CAAC;AAAY,aAAO,MAAM,OAAO;AACrC,WAAO,gBAAgB;AAAA;AAG/B,MAAI,MAAM,iBAAiB,CAAC,aAAqB;AAC7C,QAAI,UAAe,KAAK,MAAO,WAAW,MAAQ;AAClD,QAAI,UAAe,KAAK,MAAO,WAAY,OAAO,MAAO;AACzD,QAAI,QAAa,KAAK,MAAM,WAAY,OAAO,KAAK,MAAM;AAE1D,YAAS,QAAQ,KAAM,IAAI,UAAU;AACrC,cAAW,UAAU,KAAM,IAAI,YAAY;AAC3C,cAAW,UAAU,KAAM,IAAI,YAAY;AAE3C,WAAO,WAAY,OAAO,MAAQ,GAAG,WAAW,YAAY,GAAG,SAAS,WAAW;AAAA;AAGvF,MAAI,MAAM,cAAc,OAAO,YAAiB,OAAY,QAA8B,YAAiB;AACvG,UAAM,sBAAsB,IAAI,uBAAQ,gBAAgB,SAAS,sBAAO,OAAO,OAAO,YAAY,MAC7F,SAAS,2BAAY;AAC1B,UAAM,aAAa,IAAI,uBAAQ,gBAAgB,SAAS,sBAAO,OAAO,MAAM,YAAY,QACnF,SAAS,2BAAY;AAC1B,UAAM,eAAe,IAAI,uBAAQ,gBAAgB,SAAS,sBAAO,OAAO,OAAO,YAAY,UACtF,SAAS,2BAAY;AAC1B,UAAM,aAAa,IAAI,uBAAQ,gBAAgB,SAAS,sBAAO,OAAO,YAAY,YAAY,QACzF,SAAS,2BAAY;AAE1B,UAAM,UAAU;AAChB,QAAI,oCAAS,kBAAiB;AAAM,cAAQ,KAAK;AACjD,QAAI,oCAAS,iBAAgB;AAAM,cAAQ,KAAK;AAChD,QAAI,oCAAS,iBAAgB;AAAM,cAAQ,KAAK;AAEhD,QAAI;AACJ,QAAI;AAAE,eAAS,MAAO,OAAM,IAAI,aAAa,MAAM,OAAO,MAAM,QAAQ,GAAG;AAAA,aAAmB,GAAP;AAAY,eAAS;AAAA;AAC5G,QAAI,UAAU,oCAAS,mBAAkB;AAAM,cAAQ,KAAK;AAE5D,UAAM,QAAQ,IAAI,OAAO,MAAM,IAAI,WAAW;AAC9C,UAAM,UAAU,MAAM,SAAS,MAAM,IAAI,WAAW,gBAAgB,MAAM,MAAM,SAAS,MAAM,WAAW;AAC1G,UAAM,eAAe,MAAM,QAAQ,KAAK;AAAA,MACpC,QAAQ,CAAC;AAAA,MACT,YAAY,QAAQ,SAAS,IAAI,CAAC;AAAA,QAC9B,MAAM;AAAA,QACN,YAAY;AAAA,WACX;AAAA,MACL,YAAY;AAAA,OACb,MAAM,MAAW;AAAA;AAEpB,QAAI,CAAC;AAAc;AAEnB,QAAI;AACJ,QAAI,oCAAS,qBAAoB,MAAM;AACnC,kBAAY,aAAa,gCAAgC,EAAE,MAAM,OAAO;AACxE,gBAAU,GAAG,WAAW,OAAO,gBAAqB;AAnHhE;AAoHgB,cAAM,YAAY,WAAW,EAAE,WAAW;AAE1C,cAAM,QAAa;AAAA,UACf,QAAQ;AAAA,YACJ,MAAM,YAAY,KAAK;AAAA,YACvB,UAAU,YAAY,KAAK;AAAA;AAAA,UAE/B,OAAO,sBAAO;AAAA,UACd,WAAW,IAAI;AAAA;AAGnB,YAAI,YAAY,aAAa,QAAQ;AACjC,gBAAM,cAAa,IAAI,MAAM,QAAQ,IAAI,iDAAa,UAAb,mBAAoB;AAC7D,cAAI,CAAC,aAAY;AACb,kBAAM,YAAY,MAAM;AACxB,sBAAU;AAAA;AAGd,gBAAM,YAAY,CAAC,GAAG,GAAG;AACzB,gBAAM,eAAe,UAAU,MAAM,MAAM,aAAa,MAAM;AAC9D,gBAAM,WAAW,iBAAiB,IAAI,GAAG,sBAAO,OAAO,mBAAmB,GAAG,sBAAO,OAAO,WAAW,iBAAiB,IAAI,mBAAqB;AAEhJ,gBAAM,MAAM,cAAc,cAAc,MAAM,MAAW;AAAA;AAEzD,gBAAM,QAAQ,GAAG,sBAAO,OAAO,mBAAmB;AAClD,gBAAM,cAAc,kBAAkB;AAAA,mBAC/B,YAAY,aAAa,MAAM;AACtC,gBAAM,cAAa,IAAI,MAAM,QAAQ,IAAI,iDAAa,UAAb,mBAAoB;AAC7D,cAAI,CAAC,aAAY;AACb,kBAAM,YAAY,MAAM;AACxB,sBAAU;AAAA;AAGd,cAAI,4CAAY,YAAW,MAAM;AAC7B,uDAAY,MAAM;AAElB,kBAAM,QAAQ,GAAG,sBAAO,OAAO;AAC/B,kBAAM,cAAc,WAAW,uDAAY,UAAZ,mBAAmB,YAAnB,mBAA4B,YAAY,uDAAY,UAAZ,mBAAmB,YAAnB,mBAA4B;AACnG,kBAAM,QAAQ,sBAAO;AAErB,gCAAoB,SAAS,sBAAO,OAAO,OAAO,SAAS,2BAAY;AAAA,iBACpE;AACH,uDAAY,MAAM;AAElB,kBAAM,QAAQ,GAAG,sBAAO,OAAO;AAC/B,kBAAM,cAAc,UAAU,uDAAY,UAAZ,mBAAmB,YAAnB,mBAA4B,YAAY,uDAAY,UAAZ,mBAAmB,YAAnB,mBAA4B;AAClG,kBAAM,QAAQ,sBAAO;AAErB,gCAAoB,SAAS,sBAAO,OAAO,OAAO,OAAO,SAAS,2BAAY;AAAA;AAGlF,uBAAa,MAAM;AAAA,YACf,QAAQ,CAAC;AAAA,YACT,YAAY,CAAC;AAAA,cACT,MAAM;AAAA,cACN,YAAY,CAAC,qBAAqB,YAAY;AAAA;AAAA;AAAA,mBAG/C,YAAY,aAAa,QAAQ;AACxC,gBAAM,cAAa,IAAI,MAAM,QAAQ,IAAI,iDAAa,UAAb,mBAAoB;AAC7D,cAAI,CAAC,aAAY;AACb,kBAAM,YAAY,MAAM;AACxB,sBAAU;AAAA;AAGd,qDAAY;AAEZ,gBAAM,QAAQ,GAAG,sBAAO,OAAO;AAC/B,gBAAM,cAAc,mBAAmB,uDAAY,UAAZ,mBAAmB,YAAnB,mBAA4B,YAAY,uDAAY,UAAZ,mBAAmB,YAAnB,mBAA4B;AAC3G,gBAAM,QAAQ,sBAAO;AAAA,mBACd,YAAY,aAAa,UAAU;AAC1C,gBAAM,QAAQ,GAAG,sBAAO,OAAO;AAC/B,gBAAM,cAAc,OAAO,UAAU,MAAO,GAAG,OAAO,MAAM,GAAG;AAAA,8CAAyD;AACxH,gBAAM,QAAQ,sBAAO;AAAA;AAGzB,oBAAY,MAAM,EAAE,QAAQ,CAAC,QAAQ,WAAW;AAAA;AAGpD,gBAAU,GAAG,OAAO,OAAO,cAAmB;AAC1C,YAAI,cAAc;AACd,cAAI;AACA,yDAAc,KAAK;AAAA,cACf,QAAQ,CAAC;AAAA,cACT,YAAY;AAAA;AAAA,mBAEX,GAAP;AAAA;AAAA;AAAA;AAAA;AAKd,WAAO,EAAE,KAAK,cAAc;AAAA;AAAA;",
  "names": []
}
