{
  "version": 3,
  "sources": ["../../../src/Utils/functions.ts"],
  "sourcesContent": ["import { ChannelType } from \"discord.js\";\r\n\r\nlet bot: any;\r\n\r\nmodule.exports = {\r\n\t/**\r\n   * Initilizes functions.\r\n   * @param {Object} client Discord client.\r\n   */\r\n\tinit(client: any) {\r\n\t\tif (!client) throw new TypeError(\"Discord client must be valid.\");\r\n\r\n\t\tbot = client;\r\n\t},\r\n\r\n\t/**\r\n\t * Split bar. A nice little progress bar.\r\n\t * @param {number} current The current progress.\r\n\t * @param {number} total The total progress.\r\n\t * @param {number} size The size of the progress bar.\r\n\t * @param {string} line The line of the progress bar. Default: \u25AC\r\n\t * @param {string} slider The slider emoji. Default: \uD83D\uDD18\r\n\t * @returns {string} The progress bar, as a string.\r\n\t */\r\n\tsplitBar(current: number, total: number, size = 40, line = \"\u25AC\", slider = \"\uD83D\uDD18\") {\r\n\t\tif (current > total) {\r\n\t\t\treturn line.repeat(size + 2);\r\n\t\t} else {\r\n\t\t\tconst percent = current / total;\r\n\t\t\tconst progress = Math.round(size * percent);\r\n\t\t\tconst progLeft = size - progress;\r\n\r\n\t\t\treturn line.repeat(progress).replace(/.$/, slider) + line.repeat(progLeft);\r\n\t\t}\r\n\t},\r\n\r\n\tcleanContent(content: string, channel: any) {\r\n\t\treturn content.replace(/<@!?[0-9]+>/g, input => {\r\n\t\t\tconst id = input.replace(/<|!|>|@/g, \"\");\r\n\t\t\tif (channel.type === ChannelType.DM) {\r\n\t\t\t\tconst user = channel.client.users.cache.get(id);\r\n\t\t\t\treturn user ? `@${user.username}`.replaceAll(\"@\", \"@\\u200b\") : input;\r\n\t\t\t}\r\n\r\n\t\t\tconst member = channel.guild.members.cache.get(id);\r\n\t\t\tif (member) {\r\n\t\t\t\treturn `@${member.displayName}`.replaceAll(\"@\", \"@\\u200b\");\r\n\t\t\t} else {\r\n\t\t\t\tconst user = channel.client.users.cache.get(id);\r\n\t\t\t\treturn user ? `@${user.username}`.replaceAll(\"@\", \"@\\u200b\") : input;\r\n\t\t\t}\r\n\t\t}).replace(/<#[0-9]+>/g, input => {\r\n\t\t\tconst mentionedChannel = channel.client.channels.cache.get(input.replace(/<|#|>/g, \"\"));\r\n\t\t\treturn mentionedChannel ? `#${mentionedChannel.name}` : input;\r\n\t\t}).replace(/<@&[0-9]+>/g, input => {\r\n\t\t\tif (channel.type === ChannelType.DM) return input;\r\n\t\t\tconst role = channel.guild.roles.cache.get(input.replace(/<|@|>|&/g, \"\"));\r\n\t\t\treturn role ? `@${role.name}` : input;\r\n\t\t});\r\n\t},\r\n\r\n\t/**\r\n   *\r\n   * @param {number} Number The number to format.\r\n   * @returns {string} The formatted number.\r\n   */\r\n\tformatNumber(Number: any) {\r\n\t\tif (typeof Number === \"string\") Number = parseInt(Number);\r\n\r\n\t\tconst DecPlaces = Math.pow(10, 1);\r\n\t\tconst Abbrev = [\"k\", \"m\", \"g\", \"t\", \"p\", \"e\"];\r\n\r\n\t\tfor (let i = Abbrev.length - 1; i >= 0; i--) {\r\n\t\t\tconst Size = Math.pow(10, (i + 1) * 3);\r\n\r\n\t\t\tif (Size <= Number) {\r\n\t\t\t\tNumber = Math.round((Number * DecPlaces) / Size) / DecPlaces;\r\n\r\n\t\t\t\tif (Number === 1000 && i < Abbrev.length - 1) {\r\n\t\t\t\t\tNumber = 1;\r\n\t\t\t\t\ti++;\r\n\t\t\t\t}\r\n\r\n\t\t\t\tNumber += Abbrev[i];\r\n\t\t\t\tbreak;\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\treturn Number;\r\n\t},\r\n\r\n\t/**\r\n   *\r\n   * @param {number} ms The ms to convert to a time.\r\n   * @param {string} type The type of formatted time. (long/short)\r\n   * @returns {string} The time.\r\n   */\r\n\tMSToTime(ms: number, type = \"long\") {\r\n\t\tconst RoundNumber = ms > 0 ? Math.floor : Math.ceil;\r\n\t\tconst Months = RoundNumber(ms / 2629800000);\r\n\t\tconst Days = RoundNumber(ms / 86400000) % 30.4167;\r\n\t\tconst Hours = RoundNumber(ms / 3600000) % 24;\r\n\t\tconst Mins = RoundNumber(ms / 60000) % 60;\r\n\t\tconst Secs = RoundNumber(ms / 1000) % 60;\r\n\r\n\t\tlet time;\r\n\t\tif (type === \"long\") {\r\n\t\t\ttime = Months > 0 ? `${Months} Month${Months === 1 ? \"\" : \"s\"}, ` : \"\";\r\n\t\t\ttime += Days > 0 ? `${Days} Day${Days === 1 ? \"\" : \"s\"}, ` : \"\";\r\n\t\t\ttime += Hours > 0 ? `${Hours} Hour${Hours === 1 ? \"\" : \"s\"}, ` : \"\";\r\n\t\t\ttime += Mins > 0 ? `${Mins} Minute${Mins === 1 ? \"\" : \"s\"} & ` : \"\";\r\n\t\t\ttime += Secs > 0 ? `${Secs} Second${Secs === 1 ? \"\" : \"s\"}` : \"0 Seconds\";\r\n\t\t} else if (type === \"short\") {\r\n\t\t\ttime = Months > 0 ? `${Months}m ` : \"\";\r\n\t\t\ttime += Days > 0 ? `${Days}d ` : \"\";\r\n\t\t\ttime += Hours > 0 ? `${Hours}h ` : \"\";\r\n\t\t\ttime += Mins > 0 ? `${Mins}m ` : \"\";\r\n\t\t\ttime += Secs > 0 ? `${Secs}s` : \"0s\";\r\n\t\t}\r\n\r\n\t\treturn time;\r\n\t},\r\n\r\n\t/**\r\n   * Get's all of the bot's guilds and counts them up.\r\n   * @returns {string} Server count\r\n   */\r\n\tasync GetServerCount() {\r\n\t\tconst promises = [bot.cluster.broadcastEval(\"this.guilds.cache.size\")];\r\n\t\treturn Promise.all(promises).then(results => results.flat().reduce((acc, ServerCount) => acc + ServerCount, 0));\r\n\t},\r\n\r\n\t/**\r\n   * Get's all of the bot\"s guilds and counts the user count.\r\n   * @returns {string} User count\r\n   */\r\n\tasync GetUserCount() {\r\n\t\tconst promises = [bot.cluster.broadcastEval(\"let users = 0; this.guilds.cache.map(server => (users += server.memberCount));\")];\r\n\t\treturn Promise.all(promises).then(res => res.flat().reduce((acc, count) => acc + count, 0));\r\n\t}\r\n};\r\n"],
  "mappings": "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",
  "names": []
}
