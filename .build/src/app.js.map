{
  "version": 3,
  "sources": ["../../src/app.ts"],
  "sourcesContent": ["// KingCh1ll //\r\n// Last Edited: 2/25/2021 //\r\n\r\n/* -------------------------------------------------- LIBRARIES --------------------------------------------------*/\r\nimport { Client, Collection, GatewayIntentBits, ApplicationCommand } from \"discord.js\";\r\nimport fs from \"fs\";\r\nimport path from \"path\";\r\nimport Util from \"util\";\r\n\r\nimport logger from \"./Utils/logger\";\r\nimport music from \"./Utils/music\";\r\n\r\n/* -------------------------------------------------- Client --------------------------------------------------*/\r\nconst client: any = new Client({\r\n  intents: [\r\n    GatewayIntentBits.Guilds,\r\n    GatewayIntentBits.GuildMembers,\n    GatewayIntentBits.GuildMessages,\n    GatewayIntentBits.GuildVoiceStates,\r\n    GatewayIntentBits.MessageContent\r\n  ]\r\n});\nclient.on(\"debug\", (event: any) => console.log(event))\nclient.on(\"ratelimit\", () => console.log(\"RATELIMITED - UH OH!\"))\r\n\r\n/* -------------------------------------------------- Config --------------------------------------------------*/\r\nclient.logger = logger;\r\n\r\nclient.commands = new Collection();\r\nclient.cooldowns = new Collection();\r\n\r\nclient.wait = Util.promisify(setTimeout);\r\nclient.functions = require(\"./Utils/functions\");\r\n\r\nclient.functions.init(client);\r\nmusic(client);\r\n\r\n/* -------------------------------------------------- Start --------------------------------------------------*/\r\nnew Promise(async (resolve: any, reject: any) => {\n  console.log(client)\r\n  for (const file of fs.readdirSync(path.resolve(__dirname, `./Events`)).filter(file => file.endsWith(\".js\"))) {\r\n    const event = (await import(path.resolve(__dirname, `./Events/${file}`))).default;\r\n    const handleArgs = (...args: any) => event.execute(client, ...args);\r\n\r\n    event.once ? client.once(file.split(\".\")[0], handleArgs) : client.on(file.split(\".\")[0], handleArgs);\r\n  }\r\n\r\n  const slashCommands: any = [];\r\n  fs.readdirSync(path.resolve(__dirname, `./Commands/Slash/`)).filter(f => f.endsWith(\".js\")).map((cmd: any) => {\r\n    let command: any = require(`./Commands/Slash/${cmd}`).default;\r\n    let commandName: any = cmd.split(\".\")[0];\r\n\r\n    if (!command) return;\r\n    command.settings.name = commandName;\r\n\r\n    if (client.commands.has(commandName)) return client.logger(`You cannot set command ${commandName} because it is already in use by the command ${client.commands.get(commandName).settings.name}. This is most likely due to a accidental clone of a command with the same name.`, \"error\");\r\n    client.commands.set(commandName, command);\r\n\r\n    if (command.settings.description.length >= 100) command.settings.description = `${command.settings.description.slice(0, 96)}...`;\r\n    command.settings.slash === true && slashCommands.push({\r\n      name: commandName,\r\n      description: command.settings.description,\r\n      options: command.settings.options || [],\r\n      type: 1\r\n    });\r\n  });\r\n\r\n  // fs.readdirSync(path.resolve(__dirname, `./Commands/Text`)).filter((file: any) => file.endsWith(\".js\")).forEach((file: any) => {\r\n  //     const commandname = file.split(\".\")[0];\r\n  //     const command = require(`./Commands/Text/${file}`)?.default;\r\n  //     if (!command || !command.settings) return;\r\n\r\n  //     command.settings.name = commandname;\r\n\r\n  //     if (client.commands.has(commandname)) return client.logger(`You cannot set command ${commandname} because it is already in use by the command ${client.commands.get(commandname).settings.name}. This is most likely due to a accidental clone of a command with the same name.`, \"error\");\r\n  //     client.commands.set(commandname, command);\r\n  // });\r\n\r\n  resolve(true);\r\n\r\n  const ready = client.readyAt ? Promise.resolve() : new Promise(r => client.once(\"ready\", r));\r\n  await ready;\r\n\r\n  const currentCmds = await client.application.commands.fetch().catch((): any => { });\r\n\r\n  const newCmds = slashCommands.filter((cmd: any) => !currentCmds.some((c: any) => c.name === cmd.name));\r\n  for (const newCmd of newCmds) await client.application.commands.create(newCmd, \"1052414895179702324\"); // 1052414895179702324 for guild only commands\r\n\r\n  const removedCmds = currentCmds.filter((cmd: any) => !slashCommands.some((c: any) => c.name === cmd.name)).toJSON();\r\n  for (const removedCmd of removedCmds) await removedCmd.delete();\r\n\r\n  const updatedCmds = slashCommands.filter((cmd: any) => slashCommands.some((c: any) => c.name === cmd.name));\r\n  for (const updatedCmd of updatedCmds) {\r\n    const newCmd: any = updatedCmd;\r\n    const previousCmd = currentCmds.find((c: any) => c.name === newCmd.name);\r\n    let modified = false;\r\n\r\n    if (previousCmd && previousCmd.description !== newCmd.description) modified = true;\r\n    if (!ApplicationCommand.optionsEqual(previousCmd?.options || [], newCmd?.options || [])) modified = true;\r\n    if (previousCmd && modified) await previousCmd.edit(updatedCmd);\r\n  }\r\n}).then(async () => await client.login(process.env.TOKEN));\r\n\r\nprocess.on(\"uncaughtException\", async (err: any) => await logger(`Error [UnE]`, `Unhandled exception error. ${err.stack}.`, \"red\"));\r\nprocess.on(\"unhandledRejection\", async (err: any) => !err?.name?.toString()?.includes(`[10008]`) && await logger(\"Error [UnR]\", err?.stack ? err.stack : err, \"red\"));\r\n\r\nexport default client;\r\n"],
  "mappings": ";;;;;;;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAIA,qBAA0E;AAC1E,gBAAe;AACf,kBAAiB;AACjB,kBAAiB;AAEjB,oBAAmB;AACnB,mBAAkB;AAGlB,MAAM,SAAc,IAAI,sBAAO;AAAA,EAC7B,SAAS;AAAA,IACP,iCAAkB;AAAA,IAClB,iCAAkB;AAAA,IAClB,iCAAkB;AAAA,IAClB,iCAAkB;AAAA,IAClB,iCAAkB;AAAA;AAAA;AAGtB,OAAO,GAAG,SAAS,CAAC,UAAe,QAAQ,IAAI;AAC/C,OAAO,GAAG,aAAa,MAAM,QAAQ,IAAI;AAGzC,OAAO,SAAS;AAEhB,OAAO,WAAW,IAAI;AACtB,OAAO,YAAY,IAAI;AAEvB,OAAO,OAAO,oBAAK,UAAU;AAC7B,OAAO,YAAY,QAAQ;AAE3B,OAAO,UAAU,KAAK;AACtB,0BAAM;AAGN,IAAI,QAAQ,OAAO,SAAc,WAAgB;AAC/C,UAAQ,IAAI;AACZ,aAAW,QAAQ,kBAAG,YAAY,oBAAK,QAAQ,WAAW,aAAa,OAAO,WAAQ,MAAK,SAAS,SAAS;AAC3G,UAAM,QAAS,OAAM,OAAO,oBAAK,QAAQ,WAAW,YAAY,UAAU;AAC1E,UAAM,aAAa,IAAI,SAAc,MAAM,QAAQ,QAAQ,GAAG;AAE9D,UAAM,OAAO,OAAO,KAAK,KAAK,MAAM,KAAK,IAAI,cAAc,OAAO,GAAG,KAAK,MAAM,KAAK,IAAI;AAAA;AAG3F,QAAM,gBAAqB;AAC3B,oBAAG,YAAY,oBAAK,QAAQ,WAAW,sBAAsB,OAAO,OAAK,EAAE,SAAS,QAAQ,IAAI,CAAC,QAAa;AAC5G,QAAI,UAAe,QAAQ,oBAAoB,OAAO;AACtD,QAAI,cAAmB,IAAI,MAAM,KAAK;AAEtC,QAAI,CAAC;AAAS;AACd,YAAQ,SAAS,OAAO;AAExB,QAAI,OAAO,SAAS,IAAI;AAAc,aAAO,OAAO,OAAO,0BAA0B,2DAA2D,OAAO,SAAS,IAAI,aAAa,SAAS,wFAAwF;AAClR,WAAO,SAAS,IAAI,aAAa;AAEjC,QAAI,QAAQ,SAAS,YAAY,UAAU;AAAK,cAAQ,SAAS,cAAc,GAAG,QAAQ,SAAS,YAAY,MAAM,GAAG;AACxH,YAAQ,SAAS,UAAU,QAAQ,cAAc,KAAK;AAAA,MACpD,MAAM;AAAA,MACN,aAAa,QAAQ,SAAS;AAAA,MAC9B,SAAS,QAAQ,SAAS,WAAW;AAAA,MACrC,MAAM;AAAA;AAAA;AAeV,UAAQ;AAER,QAAM,QAAQ,OAAO,UAAU,QAAQ,YAAY,IAAI,QAAQ,OAAK,OAAO,KAAK,SAAS;AACzF,QAAM;AAEN,QAAM,cAAc,MAAM,OAAO,YAAY,SAAS,QAAQ,MAAM,MAAW;AAAA;AAE/E,QAAM,UAAU,cAAc,OAAO,CAAC,QAAa,CAAC,YAAY,KAAK,CAAC,MAAW,EAAE,SAAS,IAAI;AAChG,aAAW,UAAU;AAAS,UAAM,OAAO,YAAY,SAAS,OAAO,QAAQ;AAE/E,QAAM,cAAc,YAAY,OAAO,CAAC,QAAa,CAAC,cAAc,KAAK,CAAC,MAAW,EAAE,SAAS,IAAI,OAAO;AAC3G,aAAW,cAAc;AAAa,UAAM,WAAW;AAEvD,QAAM,cAAc,cAAc,OAAO,CAAC,QAAa,cAAc,KAAK,CAAC,MAAW,EAAE,SAAS,IAAI;AACrG,aAAW,cAAc,aAAa;AACpC,UAAM,SAAc;AACpB,UAAM,cAAc,YAAY,KAAK,CAAC,MAAW,EAAE,SAAS,OAAO;AACnE,QAAI,WAAW;AAEf,QAAI,eAAe,YAAY,gBAAgB,OAAO;AAAa,iBAAW;AAC9E,QAAI,CAAC,kCAAmB,aAAa,4CAAa,YAAW,IAAI,kCAAQ,YAAW;AAAK,iBAAW;AACpG,QAAI,eAAe;AAAU,YAAM,YAAY,KAAK;AAAA;AAAA,GAErD,KAAK,YAAY,MAAM,OAAO,MAAM,QAAQ,IAAI;AAEnD,QAAQ,GAAG,qBAAqB,OAAO,QAAa,MAAM,2BAAO,eAAe,8BAA8B,IAAI,UAAU;AAC5H,QAAQ,GAAG,sBAAsB,OAAO,QAAU;AAxGlD;AAwGqD,UAAC,wCAAK,SAAL,mBAAW,eAAX,mBAAuB,SAAS,eAAc,MAAM,2BAAO,eAAe,4BAAK,SAAQ,IAAI,QAAQ,KAAK;AAAA;AAE9J,IAAO,cAAQ;",
  "names": []
}
